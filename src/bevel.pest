WHITESPACE = _{ " " | "\t" }

COMMENT = _{ "#" ~ (!nl ~ ANY)* ~ nl }

nl = _{ NEWLINE+ }

ident = @{ LETTER ~ (LETTER | ASCII_DIGIT | "_")* }

empty_pat = { "_" }

atom = @{ "'" ~ ident }

num_literal = @{ int ~ ("." ~ (ASCII_DIGIT | "_")*)? ~ (^"e" ~ int)? }
	int = { ("+" | "-")? ~ (ASCII_DIGIT | "_")+ }

num_operation = _{ add | subtract | multiply | divide | modulo }
	add = { "+" }
	subtract = { "-" }
	multiply = { "*" }
	divide = { "/" }
	modulo = { "%" }

num_compare = _{ leq | geq | eq | neq | gt | lt }
	gt = { ">" }
	lt = { "<" }
	leq = { "<=" }
	geq = { ">=" }
	eq = { "==" }
	neq = { "!=" }


relation_decl = { ident ~ "(" ~ pattern_list ~ ")" }
pattern_list = { (pattern ~ ("," ~ pattern)*)? }
pattern = { empty_pat | num_literal | ident | atom | list_pattern | conslist_pattern}
list_pattern = { "[" ~ (pattern ~ ("," ~ pattern)*)? ~ "]" }
conslist_pattern = { "(" ~ pattern ~ (":" ~ pattern)+ ~ ")" }

expr_list = { (expr ~ ("," ~ expr)*)? }
relation_call = { ident ~ "(" ~ expr_list ~ ")" }
conslist_expr = { "(" ~ expr ~ (":" ~ expr)+ ~ ")" }
list_expr = { "[" ~ (expr ~ ("," ~ expr)*)? ~ "]" }
expr = { term ~ (num_operation ~ term)* }
term = _{ num_literal | atom | ("(" ~ expr ~ ")") | relation_call | ident | list_expr | conslist_expr }

binary_comparison = { expr ~ num_compare ~ expr }

simple_relation = { relation_decl ~ "~" ~ pattern }

multiple_relation = { relation_decl ~ "~" ~ "(" ~ pattern_list ~ ")" }

statement = _{ assignment | mul_assignment | relate | mul_relate | binary_comparison | relation_call }
assignment = { pattern ~ "~" ~ expr }
mul_assignment = { "(" ~ pattern_list ~ ")" ~ "~" ~ expr }
relate = { "relate" ~ expr }
mul_relate = { "relate" ~ mul_expr }
mul_expr = { (( "(" ~ expr ~ ("," ~ expr)*) ~ ")" ) | ( expr ~ ("," ~ expr)* ) }

relation_block = { 
	relation_decl ~ nl? ~ block
}

block = {
	"{" ~
	(nl ~ statement)+ ~ nl? ~
	"}"
}

program = _{ SOI ~ nl? ~ ((simple_relation | relation_block | multiple_relation) ~ ";" ~ nl)+ ~ EOI}
